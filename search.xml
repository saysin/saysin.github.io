<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac终端（zsh）使用SS代理进行连接</title>
    <url>/2019/10/13/Mac%E7%BB%88%E7%AB%AF%EF%BC%88zsh%EF%BC%89%E4%BD%BF%E7%94%A8SS%E4%BB%A3%E7%90%86%E8%BF%9B%E8%A1%8C%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>平时我们在使用SS代理服务后，浏览器可以正常fan墙使用，但是在终端里面使用git/brew/pip等命令时，速度却是出奇的慢，实际上这是由于虽然SS设置了全局设置，但是并没有把全局设置传递到终端。我们需要一些设置使得终端也能正确使用SS代理服务。<br>SS搭建问题在这里不进行展开叙述，网上教程也很多，也有现成的SS服务可以购买。<br>下面对终端设置SS代理服务进行简单的阐述。</p>
<h1 id="1-开启SS"><a href="#1-开启SS" class="headerlink" title="1.开启SS"></a>1.开启SS</h1><pre><code>SS:shadowsocks</code></pre><h1 id="2-检查代理状态"><a href="#2-检查代理状态" class="headerlink" title="2.检查代理状态"></a>2.检查代理状态</h1><pre><code>curl https://ip.cn
curl curl ipinfo.io #备用查询接口</code></pre><h1 id="3-打开SS设置"><a href="#3-打开SS设置" class="headerlink" title="3.打开SS设置"></a>3.打开SS设置</h1><p>获取设置内容高级项中，SS所监听的端听IP以及监听端口</p>
<h1 id="4-编辑zsh配置文件"><a href="#4-编辑zsh配置文件" class="headerlink" title="4.编辑zsh配置文件"></a>4.编辑zsh配置文件</h1><pre><code>vim ~/.zshrc </code></pre><p>使用socks5协议对刚才获取到的监听IP与监听端口进行拼接<br>    socks5://(IP):(端口)<br>添加以下内容到配置文件内 (使用刚才拼接好的地址)<br>    alias proxy=’export all_proxy=socks5://127.0.0.1:1080’#用于开启终端代理<br>    alias unproxy=’unset all_proxy’#用于关闭终端代理<br>保存退出后<br>    source ~/.zshrc</p>
<h1 id="5-应用配置"><a href="#5-应用配置" class="headerlink" title="5.应用配置"></a>5.应用配置</h1><pre><code>proxy #开启终端代理
curl https://ip.cn #发现此时ip地址发生了变化，说明终端代理设置成功</code></pre><p>注意：不能使用ping检测是否成功代理:<br>ss基于的SOCKS 5代理协议,支持TCP和UDP服务。而ping是基于icmp协议的,因此在ss下不能使用ping作为检测标准。</p>
<h1 id="6-关闭终端代理"><a href="#6-关闭终端代理" class="headerlink" title="6.关闭终端代理"></a>6.关闭终端代理</h1><p>在使用国内镜像源的时候，需要把终端代理关闭，要不然无法进行更新与下载<br>    unproxy #关闭终端代理</p>
]]></content>
      <categories>
        <category>计算机技巧</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac清除Launchpad应用程序图标</title>
    <url>/2019/10/08/Mac%E6%B8%85%E9%99%A4Launchpad%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<p>用Spotlight（在屏幕右上角那个放大镜），我们输入要删除的应用名称，</p>
<p>这时候我们不要点回车，我们按住Command再点回车，</p>
<p>搜索的结果就会在finder中显示。</p>
<p>这样就会在文件夹中显示。然后丢掉回收站。清除就OK啦。</p>
]]></content>
      <categories>
        <category>计算机技巧</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>让Homebrew飞起来</title>
    <url>/2019/10/07/%E8%AE%A9Homebrew%E9%A3%9E%E8%B5%B7%E6%9D%A5/</url>
    <content><![CDATA[<p>国内homebrew连接速度不稳定，brew update 经常卡死，可以通过替换镜像源的方式提高连接的稳定性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd  $(brew --repo)  #进入 homebrew 根目录</span><br><span class="line">git remote set-url origin  https://mirrors.ustc.edu.cn/brew.git #替换brew远程库</span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git #替换 home-brew 远程库</span><br><span class="line">echo &quot;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&quot;&gt;&gt;~/.zshrc #替换bottles源,根据 bash 的不同有区别</span><br><span class="line">source ~/.zshrc</span><br><span class="line">brew update #应用</span><br></pre></td></tr></table></figure>

<h1 id="国内源"><a href="#国内源" class="headerlink" title="国内源"></a>国内源</h1><p>中科大:<a href="https://mirrors.ustc.edu.cn/brew.git" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/brew.git</a></p>
<p>清华大学:<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p>
]]></content>
      <categories>
        <category>计算机技巧</category>
      </categories>
      <tags>
        <tag>homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令</title>
    <url>/2019/10/06/git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><p>Git是目前世界上最先进的分布式版本控制系统。<br>其最核心的功能是能够进行版本跟踪，也就是说你每次的修改系统都会将其记录下俩，这对于项目的管理是非常高效的。</p>
<h2 id="Git的由来"><a href="#Git的由来" class="headerlink" title="Git的由来"></a>Git的由来</h2><p>Linus大神在1991年创建开源的Linux操作系统，随着Linux系统不断的发展完善，已经成为了最大的服务器系统软件。</p>
<p>Linus虽然创建了Linux，但其代码是由许许多多分布于世界各地的开源志愿者们积极贡献自己的代码而来，但是如此众多的开发者参与其中，Linux的代码管理成了一个很重要的问题。</p>
<p>在2002年以前，志愿者们把源代码通过diff的方式发给Linus，Linus通过手工方式合并代码。</p>
<p>到了2002年，Linux系统已经发展了十载，代码库已经非常巨大，很难继续以手工的方式进行管理了。社区的弟兄们也对这种方式表达了强烈的不满，Linus选择了商业的版本控制软件BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p>
<p>安定的局面一直维持到2005年，Linux社区牛人聚集，难免沾染一些梁山好汉的江湖气息。开发Samba的Andrew试图破解BitKeeper的协议，被BitMover公司发现了，于是BitMover公司收回了Linux社区的免费使用权。</p>
<p>也许Linus向BitMover公司道个歉，保证以后严加管教自己弟兄，这事可能就过去了，但是，实际情况是这样的：Linus花了两周时间用C写了一个分布式版本控制系统，也就是Git。一个月之内。Linux系统已经由Git管理了。</p>
<h1 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h1><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>1.创建一个名为learngit的目录（当然命名可以任意）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br></pre></td></tr></table></figure>

<p>2.将learngit变成Git管理的仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<p>Git就把仓库给建好了。并且当前目录下会多一个.git的目录，这个目录是Git来跟踪管理版本库的，没事不要手动修改目录里面的文件，如果改乱了，有可能会把Git仓库破坏。</p>
<h2 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h2><p>所有的版本控制系统，只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等。版本控制系统会告诉你每次的改动。</p>
<p>需要注意的是，Microsoft的Word文档格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，如果要真正使用版本控制系统，得用纯文本方式编写文件。文本是有编码的，一般建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台支持。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt     # 将文件添加到仓库</span><br><span class="line">$ git commit -m &quot;write something&quot;# 将文件提交到仓库，-m后面输入的是本次提交的说明</span><br></pre></td></tr></table></figure>

<p>Git可以一次性提交很多文件，比如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt</span><br><span class="line">$ git commit -m &quot;add 3 files&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>

<p>上述命令可以让我们时刻掌握仓库当前的状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff readme.txt</span><br></pre></td></tr></table></figure>

<p>这个命令可以看出文档做出了什么改变</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo命令</title>
    <url>/2019/10/05/Hexo%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>本篇讲述了hexo命令大全</p>
<h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo -g #安装</span><br><span class="line">npm update hexo -g #升级  </span><br><span class="line">hexo init #初始化</span><br></pre></td></tr></table></figure>

<h1 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo p == hexo publish</span><br><span class="line">hexo g == hexo generate#生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy#部署</span><br></pre></td></tr></table></figure>

<h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server #Hexo 会监视文件变动并自动更新，无须重启服务器。</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口为5000</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo d #开始部署</span><br></pre></td></tr></table></figure>

<h1 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo generate #使用 Hexo 生成静态文件快速而且简单</span><br><span class="line">hexo generate --watch #监视文件变动</span><br></pre></td></tr></table></figure>

<h1 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两个命令的作用是相同的</span><br><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上面的命令可以使用简写命令</span><br><span class="line">hexo g -d</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line">hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>婚礼记忆随笔</title>
    <url>/2019/10/04/%E5%A9%9A%E7%A4%BC%E8%AE%B0%E5%BF%86/</url>
    <content><![CDATA[<h1 id="婚姻"><a href="#婚姻" class="headerlink" title="婚姻"></a>婚姻</h1><p>2019年的8月11日,也许对于很多人来说只是一个普通的日子，但是对于我来说却是一个意义非凡的日子，因为今天我结婚了。历时七年，我们终于到达了爱情的终点站，婚礼。婚姻，是爱情的终结，同时也是亲情的开端。我和燕子之间的感情不再只是激情与浪漫，虽然我相信以后的日子里这两样东西会一直出现在我们的平淡生活中，同时，我知道，婚姻对我们来说意味着一定的责任以及对爱人的义务。以后，相互关心，关爱彼此是一种法律上的义务，是理所应当的事情；相互扶持，不离不弃不只是婚礼上的简单宣誓，而是需要在生活中点点滴滴中去表现出来，一辈子去践行的诺言。</p>
<h1 id="不确定性"><a href="#不确定性" class="headerlink" title="不确定性"></a>不确定性</h1><p>生活总是充满着不确定性，不过这恰恰是生活迷人的地方，这种不确定让我们相信未来，相信日子不会一成不变的周而复始，也不会是如预期的按部就班。生活总是会在某些特殊时刻给我们一些惊喜和喜悦。</p>
<h1 id="关于孩子"><a href="#关于孩子" class="headerlink" title="关于孩子"></a>关于孩子</h1><p>孩子总是能给我们带来希望和未来的感觉。我相信我的孩子也会是我的希望和骄傲，但是未来的路很长，我愿意陪着我的孩子一同成长，不单是陪他（她）年龄上的长大，更希望陪他（她）思想上的成长。我希望我将来能够是我孩子的知心朋友，是我孩子生活上的人生导师。我愿意将我自己所知道的知识和掌握的技能全部教授于他（她），当然前提是他（她）想学习我自认为很骄傲的知识和技能。我希望我能陪着他（她），直到他（她）拥有自己的家庭，我希望我是他（她）最坚实的后盾，无论遇到什么委屈和困难，我都可以帮到他（她）。我愿意去宠爱他（她），直到他（她）自己认为自己已经长大了，想要自己出去闯天下，那时候，我想我会很不情愿的松开自己的双手。</p>
<h1 id="关于事业"><a href="#关于事业" class="headerlink" title="关于事业"></a>关于事业</h1><p>这是一个最坏的时代，这也是一个最好的时代。这是一个阶级日趋固化的社会，很多资源已经为少数精英所占据，很多普通人注定不能改变这个世界，只能平淡的度过自己的一生。也许我也是这众多的普通人中的一员，但是我还是希望自己能拥有自己的事业，而不只是工作而已。</p>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>today</title>
    <url>/2019/09/29/today/</url>
    <content><![CDATA[<p>Today is the birthday of my own website.<br>Congratulations!</p>
]]></content>
  </entry>
</search>
